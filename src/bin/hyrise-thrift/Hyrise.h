/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Hyrise_H
#define Hyrise_H

#include <thrift/TDispatchProcessor.h>
#include "protocol_types.h"



class HyriseIf {
 public:
  virtual ~HyriseIf() {}
  virtual void ping() = 0;
  virtual void query(Result& _return, const Query& q) = 0;
};

class HyriseIfFactory {
 public:
  typedef HyriseIf Handler;

  virtual ~HyriseIfFactory() {}

  virtual HyriseIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HyriseIf* /* handler */) = 0;
};

class HyriseIfSingletonFactory : virtual public HyriseIfFactory {
 public:
  HyriseIfSingletonFactory(const boost::shared_ptr<HyriseIf>& iface) : iface_(iface) {}
  virtual ~HyriseIfSingletonFactory() {}

  virtual HyriseIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HyriseIf* /* handler */) {}

 protected:
  boost::shared_ptr<HyriseIf> iface_;
};

class HyriseNull : virtual public HyriseIf {
 public:
  virtual ~HyriseNull() {}
  void ping() {
    return;
  }
  void query(Result& /* _return */, const Query& /* q */) {
    return;
  }
};


class Hyrise_ping_args {
 public:

  Hyrise_ping_args() {
  }

  virtual ~Hyrise_ping_args() throw() {}


  bool operator == (const Hyrise_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Hyrise_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hyrise_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hyrise_ping_pargs {
 public:


  virtual ~Hyrise_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hyrise_ping_result {
 public:

  Hyrise_ping_result() {
  }

  virtual ~Hyrise_ping_result() throw() {}


  bool operator == (const Hyrise_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Hyrise_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hyrise_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hyrise_ping_presult {
 public:


  virtual ~Hyrise_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Hyrise_query_args__isset {
  _Hyrise_query_args__isset() : q(false) {}
  bool q;
} _Hyrise_query_args__isset;

class Hyrise_query_args {
 public:

  Hyrise_query_args() {
  }

  virtual ~Hyrise_query_args() throw() {}

  Query q;

  _Hyrise_query_args__isset __isset;

  void __set_q(const Query& val) {
    q = val;
  }

  bool operator == (const Hyrise_query_args & rhs) const
  {
    if (!(q == rhs.q))
      return false;
    return true;
  }
  bool operator != (const Hyrise_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hyrise_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hyrise_query_pargs {
 public:


  virtual ~Hyrise_query_pargs() throw() {}

  const Query* q;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hyrise_query_result__isset {
  _Hyrise_query_result__isset() : success(false) {}
  bool success;
} _Hyrise_query_result__isset;

class Hyrise_query_result {
 public:

  Hyrise_query_result() {
  }

  virtual ~Hyrise_query_result() throw() {}

  Result success;

  _Hyrise_query_result__isset __isset;

  void __set_success(const Result& val) {
    success = val;
  }

  bool operator == (const Hyrise_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Hyrise_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hyrise_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hyrise_query_presult__isset {
  _Hyrise_query_presult__isset() : success(false) {}
  bool success;
} _Hyrise_query_presult__isset;

class Hyrise_query_presult {
 public:


  virtual ~Hyrise_query_presult() throw() {}

  Result* success;

  _Hyrise_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HyriseClient : virtual public HyriseIf {
 public:
  HyriseClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HyriseClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void query(Result& _return, const Query& q);
  void send_query(const Query& q);
  void recv_query(Result& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HyriseProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HyriseIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HyriseProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HyriseProcessor(boost::shared_ptr<HyriseIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &HyriseProcessor::process_ping;
    processMap_["query"] = &HyriseProcessor::process_query;
  }

  virtual ~HyriseProcessor() {}
};

class HyriseProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HyriseProcessorFactory(const ::boost::shared_ptr< HyriseIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HyriseIfFactory > handlerFactory_;
};

class HyriseMultiface : virtual public HyriseIf {
 public:
  HyriseMultiface(std::vector<boost::shared_ptr<HyriseIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HyriseMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HyriseIf> > ifaces_;
  HyriseMultiface() {}
  void add(boost::shared_ptr<HyriseIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void query(Result& _return, const Query& q) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, q);
    }
    ifaces_[i]->query(_return, q);
    return;
  }

};



#endif
