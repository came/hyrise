/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef protocol_TYPES_H
#define protocol_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _Query__isset {
  _Query__isset() : session_context(false), autocommit(true), limit(true), offset(true) {}
  bool session_context;
  bool autocommit;
  bool limit;
  bool offset;
} _Query__isset;

class Query {
 public:

  static const char* ascii_fingerprint; // = "72EF5B703EDB4CFCAA2C8933873614A4";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0xEF,0x5B,0x70,0x3E,0xDB,0x4C,0xFC,0xAA,0x2C,0x89,0x33,0x87,0x36,0x14,0xA4};

  Query() : query(), session_context(0), autocommit(false), limit(0LL), offset(0LL) {
  }

  virtual ~Query() throw() {}

  std::string query;
  int64_t session_context;
  bool autocommit;
  int64_t limit;
  int64_t offset;

  _Query__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  void __set_session_context(const int64_t val) {
    session_context = val;
    __isset.session_context = true;
  }

  void __set_autocommit(const bool val) {
    autocommit = val;
    __isset.autocommit = true;
  }

  void __set_limit(const int64_t val) {
    limit = val;
    __isset.limit = true;
  }

  void __set_offset(const int64_t val) {
    offset = val;
    __isset.offset = true;
  }

  bool operator == (const Query & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    if (__isset.session_context != rhs.__isset.session_context)
      return false;
    else if (__isset.session_context && !(session_context == rhs.session_context))
      return false;
    if (__isset.autocommit != rhs.__isset.autocommit)
      return false;
    else if (__isset.autocommit && !(autocommit == rhs.autocommit))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    if (__isset.offset != rhs.__isset.offset)
      return false;
    else if (__isset.offset && !(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Query &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Query &a, Query &b);


class Result {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Result() : result() {
  }

  virtual ~Result() throw() {}

  std::string result;

  void __set_result(const std::string& val) {
    result = val;
  }

  bool operator == (const Result & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Result &a, Result &b);



#endif
